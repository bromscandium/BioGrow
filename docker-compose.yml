version: '3.9'

services:
  qdrant: 
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    volumes:
      - ./qdrant_data:/data
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1
      interval: 5s
      timeout: 5s
      retries: 3

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 1s
      timeout: 3s
      retries: 30

  # celery_worker:
  #   build: .
  #   command: celery -A celery_tasks worker --loglevel=info
  #   environment:
  #     - CELERY_BROKER_URL=${CELERY_BROKER_URL}
  #     - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
  #     - OPENAI_API=${OPENAI_API_KEY}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_PORT=${POSTGRES_PORT}
  #     - POSTGRES_HOST=${POSTGRES_HOST}
  #   depends_on:
  #     - redis

  backend:
    build: /farmer_backend
    ports:
      - "8000:8000"
    env_file:
      - .env  
    environment:
      - OPENAI_API=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - PYTHONPATH=/app
    depends_on:
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy  
      redis:
        condition: service_healthy

  # mobile_app:
  #   build: .farmer_app
  #   env_file:
  #     - .env
  #   environment:
  #     - OPENAI_API=${OPENAI_API_KEY}
  #     - CELERY_BROKER_URL=${CELERY_BROKER_URL}
  #     - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
  #   depends_on:
  #     qdrant:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy  
  #     redis:
  #       condition: service_healthy


volumes:
  postgres_data: